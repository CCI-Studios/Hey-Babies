<?php

/**
 * @file
 * easypost.module
 *
 * @todo,
 * - Quantity of products, I.E. 3 of product X and 1 of product B
 * - Support predefined packages via field on product entity
 * - Pass customer selected service rate as shipping rate
 */

/**
 * Implements hook_menu().
 */
function easypost_menu() {
  $items['admin/commerce/config/easypost'] = array(
    'title' => 'Administer EasyPost Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('easypost_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/easypost.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}
 
/**
 * Implements hook_libraries_info().
 */
function easypost_libraries_info() {
  return array(
    'easypost' => array(
      'name' => 'EasyPost API',
      'vendor url' => 'https://www.easypost.com',
      'download url' => 'https://github.com/EasyPost/easypost-php',
      'version' => '2.0',
      'xautoload' => function($api) {
        $api->namespaceRoot('EasyPost', 'lib');
      },
    ),
  );
}

/**
 * Implements hook_commerce_shipping_method_info().
 */
function easypost_commerce_shipping_method_info() {
  $shipping_methods = array();

  $shipping_methods['easypost'] = array(
    'title' => t('EasyPost'),
    'description' => t('Provides integration into the EasyPost Shipping API.'),
  );

  return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function easypost_commerce_shipping_service_info() {
  $shipping_services = array();
  
  $shipping_services['easypost_cpc_expeditedparcel'] = array(
    'title' => t('Canada Post Expedited Parcel'),
    'shipping_method' => 'easypost',
    'price_component' => 'shipping',
    'callbacks' => array(
      'rate' => 'easypost_service_rate',
    ),
    'data' => array(
        'carrier_label' => 'Canada Post',
        'service_label' => 'Expedited Parcel',
        'carrier_code' => 'CanadaPost',
        'service_code' => 'ExpeditedParcel',
    ),
  );
  
  $shipping_services['easypost_cpc_xpresspost'] = array(
    'title' => t('Canada Post XpressPost'),
    'shipping_method' => 'easypost',
    'price_component' => 'shipping',
    'callbacks' => array(
      'rate' => 'easypost_service_rate',
    ),
    'data' => array(
        'carrier_label' => 'Canada Post',
        'service_label' => 'Xpresspost',
        'carrier_code' => 'CanadaPost',
        'service_code' => 'Xpresspost',
    ),
  );
  
  $shipping_services['easypost_cpc_priority'] = array(
    'title' => t('Canada Post Priority'),
    'shipping_method' => 'easypost',
    'price_component' => 'shipping',
    'callbacks' => array(
      'rate' => 'easypost_service_rate',
    ),
    'data' => array(
        'carrier_label' => 'Canada Post',
        'service_label' => 'Priority',
        'carrier_code' => 'CanadaPost',
        'service_code' => 'Priority',
    ),
  );
  
  $shipping_services['easypost_ups_upsstandard'] = array(
    'title' => t('UPS Standard'),
    'shipping_method' => 'easypost',
    'price_component' => 'shipping',
    'callbacks' => array(
      'rate' => 'easypost_service_rate',
    ),
    'data' => array(
        'carrier_label' => 'UPS',
        'service_label' => 'Standard',
        'carrier_code' => 'UPS',
        'service_code' => 'UPSStandard',
    ),
  );
  
  $shipping_services['easypost_ups_2nddayair'] = array(
    'title' => t('UPS 2nd Day Air'),
    'shipping_method' => 'easypost',
    'price_component' => 'shipping',
    'callbacks' => array(
      'rate' => 'easypost_service_rate',
    ),
    'data' => array(
        'carrier_label' => 'UPS',
        'service_label' => '2nd Day Air',
        'carrier_code' => 'UPS',
        'service_code' => '2ndDayAir',
    ),
  );

  return $shipping_services;
}

/**
 * Shipping service callback: holds an empty amount until a carrier & service
 * is selected by the customer.
 */
function easypost_service_rate($shipping_service, $order) {
    $full_service_name = $shipping_service['name'];
    $service_name = substr($full_service_name, strrpos($full_service_name, '_')+1);
    
    $rates = commerce_shipping_rates_cache_get('easypost', $order, variable_get('commerce_easypost_cache_timeout', 60));
    
    if (!$rates)
    {
        $shipment = _easypost_shipment($order);
        $raw_rates = $shipment->get_rates();

        foreach ($raw_rates->rates as $rate) {
            $rates[strtolower($rate['service'])] = array(
                'amount' => $rate['rate']*100,
                'currency_code' => 'CAD',
                'data' => array(),
            );
        }
        
        // Cache these rates.
        commerce_shipping_rates_cache_set('easypost', $order, $rates);
    }
    
    $rate = isset($rates[$service_name]) ? $rates[$service_name] : FALSE;
    if ($rate)
    {
        $rate['data'] = $shipping_service['data'];
    }
    return $rate;
}

/**
 * Set EasyPost API key.
 */
function _easypost_return_status() {
  $status = FALSE;

  $variable = variable_get('easypost_apikey', 'test');
  if ($api_key = variable_get('easypost_' . $variable . '_apikey', FALSE)) {
    \EasyPost\EasyPost::setApiKey($api_key);

    $status = TRUE;
  }
  else {
    drupal_set_message(t('No EasyPost API key found.'), 'warning');
  }

  return $status;
}

/**
 * Query EasyPost API & create address objects for both seller & customer.
 */
function _easypost_addresses($profile_id) {
  $addresses = FALSE;

  if ($country = variable_get('easypost_country', FALSE)) {
    $from_address_params = array(
      'name' => variable_get('easypost_name', ''),
      'street1' => variable_get('easypost_address_one', ''),
      'sreet2' => variable_get('easypost_address_two', ''),
      'city' => variable_get('easypost_locality', ''),
      'state' => variable_get('easypost_state', ''),
      'zip' => variable_get('easypost_postalcode', ''),
      'country' => variable_get('easypost_country', ''),
      'phone' => variable_get('easypost_phone', ''),
    );

    $addresses['from_address'] = $from_address_params;
  }

  $customer = commerce_customer_profile_load($profile_id);
  if ($customer) {
    $to_address_params = array(
      'name' => $customer->commerce_customer_address['und'][0]['name_line'],
      'street1' => $customer->commerce_customer_address['und'][0]['thoroughfare'],
      'sreet2' => $customer->commerce_customer_address['und'][0]['premise'],
      'city' => $customer->commerce_customer_address['und'][0]['locality'],
      'state' => $customer->commerce_customer_address['und'][0]['administrative_area'],
      'zip' => $customer->commerce_customer_address['und'][0]['postal_code'],
      'country' => $customer->commerce_customer_address['und'][0]['country']
    );

    $addresses['to_address'] = $to_address_params;
 }

  return $addresses;
}

function _easypost_shipment($order, $measurements = NULL)
{
    _easypost_return_status();
    $profile_id = $order->commerce_customer_shipping[LANGUAGE_NONE][0]['profile_id'];
    $addresses = _easypost_addresses($profile_id);
    if (!$measurements)
    {
        $measurements = array(
            'length' => 16,
            'width' => 16,
            'height' => 8,
            'weight' => 32,
        );
    }
    $shipment_params = array(
        'from_address' => $addresses['from_address'],
        'to_address' => $addresses['to_address'],
        'parcel' => $measurements,
        'currency' => 'CAD',
    );

    return \EasyPost\Shipment::create($shipment_params);
}

function easypost_generate_shipping_label($order, $measurements)
{
    $line_items = $order->commerce_order_total[LANGUAGE_NONE][0]['data']['components'];
    foreach ($line_items as $line_item)
    {
        if ($line_item['name'] == 'shipping')
        {
            $data = $line_item['price']['data'];
            $carrier = $data['carrier_code'];
            $service = $data['service_code'];
            
            $shipment = _easypost_shipment($order, $measurements);
            $rates = $shipment->get_rates();
            
            $selected_rate = NULL;
            foreach ($rates->rates as $rate)
            {
                if ($rate['service'] == $service && $rate['carrier'] == $carrier)
                {
                    $selected_rate = $rate;
                    break;
                }
            }
            
            $shipment->buy($selected_rate);
            if ($shipment->postage_label->label_url)
            {
                $label_url = $shipment->postage_label->label_url;
                if ($shipment->postage_label->label_size != '8.5x11')
                {
                    $shipment->label(array('file_format' => 'pdf'));
                    $label_url = $shipment->postage_label->label_pdf_url;
                    
                }
                
                $tracking_url = '';
                switch ($carrier)
                {
                    case 'UPS':
                        $tracking_url = 'http://wwwapps.ups.com/WebTracking/track?track.x=Track&trackNums='.$shipment->tracking_code;
                        break;
                    case 'CanadaPost':
                        $tracking_url = 'http://www.canadapost.ca/cpotools/apps/track/personal/findByTrackNumber?trackingNumber='.$shipment->tracking_code;
                        break;
                }
                
                return array(
                    'label_url' => $label_url,
                    'tracking_number' => $shipment->tracking_code,
                    'tracking_url' => $tracking_url,
                    'carrier' => $carrier,
                    'service' => $service,
                );
            }
            
            break;
        }
    }
    
    return FALSE;
}
